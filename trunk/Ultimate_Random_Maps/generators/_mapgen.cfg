#textdomain wesnoth-Ultimate_Random_Maps
# Map generator macros for use with the default map generator.
# These don't depend on any other macros.
# These are only used inside the [generator] tag.
# As [generator] does not support $variable substitution,
# they are all strictly syntatic shortcuts.

# ! in comments is used in generating HTML documentation, ignore it otherwise.
#define HEIGHT ALTITUDE TERRAIN
    # Syntax shortcut
    [height]
        height={ALTITUDE}
        terrain={TERRAIN}
    [/height]
#enddef

#define CONVERT MINHEIGHT MAXHEIGHT MINTEMP MAXTEMP TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MINHEIGHT}
        max_height={MAXHEIGHT}
        min_temperature={MINTEMP}
        max_temperature={MAXTEMP}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define CONVERT_HEIGHT MINHEIGHT MAXHEIGHT TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height range, across all temps.
    # Since min & max temperature are left out, they default to cover all temps
    [convert]
        min_height={MINHEIGHT}
        max_height={MAXHEIGHT}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define CONVERT_TEMP MINTEMP MAXTEMP TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified temp range, across all heights.
    # Since min & max height are left out, they default to cover all heights.
    [convert]
        min_temperature={MINTEMP}
        max_temperature={MAXTEMP}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define CONVERT_ALL TERRAINLIST NEW_TERRAIN
    #  Convert terrains to a terrain across all heights and temps.
    # Since min & max height & temp are left out, they default to cover all terrain on the map.
    [convert]
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define ROAD_COST TERRAIN COST NEW_TERRAIN
    # Syntax shortcut
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to={NEW_TERRAIN}
    [/road_cost]
#enddef

#define ROAD_COST_BRIDGE TERRAIN COST BRIDGE ALT
    # when supplying BRIDGE send it a list like: (Ww^Bw|, Ww^Bw/, Ww^Bw\)
    # if using BRIDGE does not make a pretty connection, the map generator will use ALT
    # typically this is a castle, though it could be anything.
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to_bridge={BRIDGE}
        convert_to={ALT}
    [/road_cost]
#enddef

#define ROAD_COST_MIN TERRAIN
    # When mulitple roads are made,
    # This encourages the use of the terrain already used as a road to be used again, without being converted.
    # Without this it's more likley you might have silly stuff like two bridges adjecent to each other crossing a river.
    [road_cost]
        terrain={TERRAIN}
        cost=2
        convert_to={TERRAIN}
    [/road_cost]
#enddef

#define VILLAGE TERRAIN VILLAGETYPE RATING LIKED_TERRAINLIST
    # Syntax shortcut
    [village]
        terrain={TERRAIN}
        convert_to={VILLAGETYPE}
        rating={RATING}
        adjacent_liked={LIKED_TERRAINLIST}
    [/village]
#enddef

#define CASTLE MINDISTANCE TERRAINLIST
    # Syntax shortcut
    [castle]
        min_distance={MINDISTANCE}
        valid_terrain={TERRAINLIST}
    [/castle]
#enddef

#define URM_ILLUMINATED_CAVE
    # Same as {INDOORS} but with a illuminated cave pic
    #textdomain wesnoth-help
    [time]
        id=urm_illuminated_cave
        name=_"Illuminated Cave"
        image=misc/time-schedules/schedule-underground-illum.png
        lighter=indoors_illum
    [/time]
#enddef

#define SCATTER_TERRAIN TERRAINLIST NEW_TERRAIN PERCENTAGE
    # A copy of SCATTER_EMBELLISHMENT with a small change
    # Replaces the first terrain with the seciond terrain the given percentage of the time
    #
    # For example, this will replace 5% of all grasslands with a volcano:
    #! {SCATTER_TERRAIN G* Mv 5}
    [store_locations]
        terrain={TERRAINLIST}
        variable=terrain_variation_locations
    [/store_locations]

    {VARIABLE terrain_variations_to_place {PERCENTAGE}}

    # TODO: change back to 100.0 once it no longer causes a crash
    {VARIABLE_OP terrain_variations_to_place divide 100.0}

    {VARIABLE_OP terrain_variations_to_place multiply $terrain_variation_locations.length}
    {VARIABLE_OP terrain_variations_to_place round ceil}

    [while]
        [variable]
            name=terrain_variations_to_place
            greater_than=0
        [/variable]

        [do]
            {VARIABLE_OP terrain_variation_i rand "0..$($terrain_variation_locations.length - 1)"}

            [terrain]
                x,y=$terrain_variation_locations[$terrain_variation_i].x,$terrain_variation_locations[$terrain_variation_i].y
                terrain={NEW_TERRAIN}
                layer=both
            [/terrain]

            {VARIABLE_OP terrain_variations_to_place sub 1}

            {CLEAR_VARIABLE terrain_variation_locations[$terrain_variation_i]}
        [/do]
    [/while]

    {CLEAR_VARIABLE terrain_variation_locations,terrain_variations_to_place,terrain_variation_i}
#enddef

#define DEEPEN_WATER
    # If a shallow water is surrounded on all sides by water, make it deep water
    # store all terrain locations
    # analyzes all 6 hexes around a location
    # if it is all water, turn location into deep water
    [terrain]
        terrain=Wo
        [and]
            terrain=Ww,Wo
        [/and]
        [filter_adjacent_location]
            terrain=Ww,Wo
            count=6
        [/filter_adjacent_location]
    [/terrain]
#enddef
